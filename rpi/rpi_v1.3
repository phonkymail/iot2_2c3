import paho.mqtt.client as mqtt
import threading
import time

# MQTT Broker details (Flespi)
mqtt_server_receiver_espsafe = "127.0.0.1"
mqtt_server_receiver_espair = "127.0.0.1"
mqtt_server_sender = "20.93.22.213"

# Function to connect to MQTT receiver server for espsafe
def connect_mqtt_receiver_espsafe():
    client = mqtt.Client("ESP32_receiver_espsafe")
    client.on_message = on_message_espsafe  # Assign on_message callback here

    while True:
        try:
            client.connect(mqtt_server_receiver_espsafe)
            print("Connected to MQTT receiver server for espsafe.")
            client.subscribe("espsafe/pir")
            client.subscribe("espsafe/flame")
            client.subscribe("espsafe/water")
            client.subscribe("espsafe/knust")
            client.subscribe("espsafe/bat")
            break
        except Exception as e:
            print("Failed to connect to MQTT receiver server for espsafe. Retrying...")
            print(e)
            time.sleep(2)

    return client

# Function to connect to MQTT receiver server for espairs
def connect_mqtt_receiver_espair():
    client = mqtt.Client("ESP32_receiver_espair")
    client.on_message = on_message_espair  # Assign on_message callback here

    while True:
        try:
            client.connect(mqtt_server_receiver_espair)
            print("Connected to MQTT receiver server for espairs.")
            client.subscribe("espair/dht")
            client.subscribe("espair/mq2")
            client.subscribe("espair/mq7")
            client.subscribe("espair/mq135")
            break
        except Exception as e:
            print("Failed to connect to MQTT receiver server for espairs. Retrying...")
            print(e)
            time.sleep(2)

    return client

# Function to connect to MQTT sender server
def connect_mqtt_sender():
    client = mqtt.Client("ESP32_sender")

    while True:
        try:
            client.connect(mqtt_server_sender)
            print("Connected to MQTT sender server.")
            break
        except Exception as e:
            print("Failed to connect to MQTT sender server. Retrying...")
            print(e)
            time.sleep(2)

    return client

# Callback function to handle incoming MQTT messages for espsafe
def on_message_espsafe(client, userdata, message):
    print("Received message on topic for espsafe:", message.topic)
    print("Message:", message.payload.decode())
    forward_message_to_another_broker(message.payload)

# Callback function to handle incoming MQTT messages for espairs
def on_message_espair(client, userdata, message):
    print("Received message on topic for espairs:", message.topic)
    print("Message:", message.payload.decode())
    forward_message_to_another_broker(message.payload)

# Function to forward received message to another MQTT broker
def forward_message_to_another_broker(msg):
    global sender_client
    sender_client.publish("espsafe/pir", msg)

# Main function for espsafe
def main_espsafe():
    receiver_client_espsafe = connect_mqtt_receiver_espsafe()
    while True:
        receiver_client_espsafe.loop()
        time.sleep(1)

# Main function for espairs
def main_espair():
    receiver_client_espair = connect_mqtt_receiver_espair()
    while True:
        receiver_client_espair.loop()
        time.sleep(1)

# Main function for sender
def main_sender():
    global sender_client
    sender_client = connect_mqtt_sender()
    while True:
        time.sleep(1)

if _name_ == "_main_":
    # Start threads for each function
    thread_espsafe = threading.Thread(target=main_espsafe)
    thread_espair = threading.Thread(target=main_espair)
    thread_sender = threading.Thread(target=main_sender)

    # Start all threads
    thread_espsafe.start()
    thread_espair.start()
    thread_sender.start()

    # Wait for all threads to complete
    thread_espsafe.join()
    thread_espair.join()
    thread_sender.join()
